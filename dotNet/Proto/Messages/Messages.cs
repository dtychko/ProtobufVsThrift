// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Proto.Messages {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Messages {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_MetricSetup__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Proto.Messages.MetricSetup, global::Proto.Messages.MetricSetup.Builder> internal__static_MetricSetup__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MetricSetupChangedEvent__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Proto.Messages.MetricSetupChangedEvent, global::Proto.Messages.MetricSetupChangedEvent.Builder> internal__static_MetricSetupChangedEvent__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CalculateMetricCommand__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Proto.Messages.CalculateMetricCommand, global::Proto.Messages.CalculateMetricCommand.Builder> internal__static_CalculateMetricCommand__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Target__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Proto.Messages.Target, global::Proto.Messages.Target.Builder> internal__static_Target__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CalculateMetricCommandExtended__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Proto.Messages.CalculateMetricCommandExtended, global::Proto.Messages.CalculateMetricCommandExtended.Builder> internal__static_CalculateMetricCommandExtended__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Messages() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5tZXNzYWdlcy5wcm90byJACgtNZXRyaWNTZXR1cBIKCgJJZBgBIAIoBRIQ", 
            "CghNZXRyaWNJZBgCIAIoBRITCgtFbnRpdHlUeXBlcxgDIAIoCSJ6ChdNZXRy", 
            "aWNTZXR1cENoYW5nZWRFdmVudBIhCgtNZXRyaWNTZXR1cBgBIAIoCzIMLk1l", 
            "dHJpY1NldHVwEikKDE1vZGlmaWNhdGlvbhgCIAIoDjINLk1vZGlmaWNhdGlv", 
            "bjoETk9ORRIRCglBY2NvdW50SWQYAyACKAUiiQEKFkNhbGN1bGF0ZU1ldHJp", 
            "Y0NvbW1hbmQSEQoJQWNjb3VudElkGAEgAigFEiEKC01ldHJpY1NldHVwGAIg", 
            "AigLMgwuTWV0cmljU2V0dXASFQoJVGFyZ2V0SWRzGAMgAygFQgIQARIPCgdF", 
            "dmVudElkGAQgAigJEhEKCUNvbW1hbmRJZBgFIAIoCSIoCgZUYXJnZXQSCgoC", 
            "SWQYASACKAUSEgoKRW50aXR5VHlwZRgCIAIoCSKUAQoeQ2FsY3VsYXRlTWV0", 
            "cmljQ29tbWFuZEV4dGVuZGVkEhEKCUFjY291bnRJZBgBIAIoBRIhCgtNZXRy", 
            "aWNTZXR1cBgCIAIoCzIMLk1ldHJpY1NldHVwEhgKB1RhcmdldHMYAyADKAsy", 
            "By5UYXJnZXQSDwoHRXZlbnRJZBgEIAIoCRIRCglDb21tYW5kSWQYBSACKAkq", 
            "PQoMTW9kaWZpY2F0aW9uEggKBE5PTkUQABIJCgVBRERFRBABEgsKB1VQREFU", 
          "RUQQAhILCgdERUxFVEVEEANCAkgB"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_MetricSetup__Descriptor = Descriptor.MessageTypes[0];
        internal__static_MetricSetup__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Proto.Messages.MetricSetup, global::Proto.Messages.MetricSetup.Builder>(internal__static_MetricSetup__Descriptor,
                new string[] { "Id", "MetricId", "EntityTypes", });
        internal__static_MetricSetupChangedEvent__Descriptor = Descriptor.MessageTypes[1];
        internal__static_MetricSetupChangedEvent__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Proto.Messages.MetricSetupChangedEvent, global::Proto.Messages.MetricSetupChangedEvent.Builder>(internal__static_MetricSetupChangedEvent__Descriptor,
                new string[] { "MetricSetup", "Modification", "AccountId", });
        internal__static_CalculateMetricCommand__Descriptor = Descriptor.MessageTypes[2];
        internal__static_CalculateMetricCommand__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Proto.Messages.CalculateMetricCommand, global::Proto.Messages.CalculateMetricCommand.Builder>(internal__static_CalculateMetricCommand__Descriptor,
                new string[] { "AccountId", "MetricSetup", "TargetIds", "EventId", "CommandId", });
        internal__static_Target__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Target__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Proto.Messages.Target, global::Proto.Messages.Target.Builder>(internal__static_Target__Descriptor,
                new string[] { "Id", "EntityType", });
        internal__static_CalculateMetricCommandExtended__Descriptor = Descriptor.MessageTypes[4];
        internal__static_CalculateMetricCommandExtended__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Proto.Messages.CalculateMetricCommandExtended, global::Proto.Messages.CalculateMetricCommandExtended.Builder>(internal__static_CalculateMetricCommandExtended__Descriptor,
                new string[] { "AccountId", "MetricSetup", "Targets", "EventId", "CommandId", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum Modification {
    NONE = 0,
    ADDED = 1,
    UPDATED = 2,
    DELETED = 3,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MetricSetup : pb::GeneratedMessage<MetricSetup, MetricSetup.Builder> {
    private MetricSetup() { }
    private static readonly MetricSetup defaultInstance = new MetricSetup().MakeReadOnly();
    private static readonly string[] _metricSetupFieldNames = new string[] { "EntityTypes", "Id", "MetricId" };
    private static readonly uint[] _metricSetupFieldTags = new uint[] { 26, 8, 16 };
    public static MetricSetup DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MetricSetup DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MetricSetup ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Proto.Messages.Messages.internal__static_MetricSetup__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MetricSetup, MetricSetup.Builder> InternalFieldAccessors {
      get { return global::Proto.Messages.Messages.internal__static_MetricSetup__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int MetricIdFieldNumber = 2;
    private bool hasMetricId;
    private int metricId_;
    public bool HasMetricId {
      get { return hasMetricId; }
    }
    public int MetricId {
      get { return metricId_; }
    }
    
    public const int EntityTypesFieldNumber = 3;
    private bool hasEntityTypes;
    private string entityTypes_ = "";
    public bool HasEntityTypes {
      get { return hasEntityTypes; }
    }
    public string EntityTypes {
      get { return entityTypes_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasMetricId) return false;
        if (!hasEntityTypes) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _metricSetupFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (hasMetricId) {
        output.WriteInt32(2, field_names[2], MetricId);
      }
      if (hasEntityTypes) {
        output.WriteString(3, field_names[0], EntityTypes);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasMetricId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, MetricId);
      }
      if (hasEntityTypes) {
        size += pb::CodedOutputStream.ComputeStringSize(3, EntityTypes);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MetricSetup ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MetricSetup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MetricSetup ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MetricSetup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MetricSetup ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MetricSetup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MetricSetup ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MetricSetup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MetricSetup ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MetricSetup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MetricSetup MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MetricSetup prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MetricSetup, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MetricSetup cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MetricSetup result;
      
      private MetricSetup PrepareBuilder() {
        if (resultIsReadOnly) {
          MetricSetup original = result;
          result = new MetricSetup();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MetricSetup MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Proto.Messages.MetricSetup.Descriptor; }
      }
      
      public override MetricSetup DefaultInstanceForType {
        get { return global::Proto.Messages.MetricSetup.DefaultInstance; }
      }
      
      public override MetricSetup BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MetricSetup) {
          return MergeFrom((MetricSetup) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MetricSetup other) {
        if (other == global::Proto.Messages.MetricSetup.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasMetricId) {
          MetricId = other.MetricId;
        }
        if (other.HasEntityTypes) {
          EntityTypes = other.EntityTypes;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_metricSetupFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _metricSetupFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasMetricId = input.ReadInt32(ref result.metricId_);
              break;
            }
            case 26: {
              result.hasEntityTypes = input.ReadString(ref result.entityTypes_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasMetricId {
        get { return result.hasMetricId; }
      }
      public int MetricId {
        get { return result.MetricId; }
        set { SetMetricId(value); }
      }
      public Builder SetMetricId(int value) {
        PrepareBuilder();
        result.hasMetricId = true;
        result.metricId_ = value;
        return this;
      }
      public Builder ClearMetricId() {
        PrepareBuilder();
        result.hasMetricId = false;
        result.metricId_ = 0;
        return this;
      }
      
      public bool HasEntityTypes {
        get { return result.hasEntityTypes; }
      }
      public string EntityTypes {
        get { return result.EntityTypes; }
        set { SetEntityTypes(value); }
      }
      public Builder SetEntityTypes(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEntityTypes = true;
        result.entityTypes_ = value;
        return this;
      }
      public Builder ClearEntityTypes() {
        PrepareBuilder();
        result.hasEntityTypes = false;
        result.entityTypes_ = "";
        return this;
      }
    }
    static MetricSetup() {
      object.ReferenceEquals(global::Proto.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MetricSetupChangedEvent : pb::GeneratedMessage<MetricSetupChangedEvent, MetricSetupChangedEvent.Builder> {
    private MetricSetupChangedEvent() { }
    private static readonly MetricSetupChangedEvent defaultInstance = new MetricSetupChangedEvent().MakeReadOnly();
    private static readonly string[] _metricSetupChangedEventFieldNames = new string[] { "AccountId", "MetricSetup", "Modification" };
    private static readonly uint[] _metricSetupChangedEventFieldTags = new uint[] { 24, 10, 16 };
    public static MetricSetupChangedEvent DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MetricSetupChangedEvent DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MetricSetupChangedEvent ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Proto.Messages.Messages.internal__static_MetricSetupChangedEvent__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MetricSetupChangedEvent, MetricSetupChangedEvent.Builder> InternalFieldAccessors {
      get { return global::Proto.Messages.Messages.internal__static_MetricSetupChangedEvent__FieldAccessorTable; }
    }
    
    public const int MetricSetupFieldNumber = 1;
    private bool hasMetricSetup;
    private global::Proto.Messages.MetricSetup metricSetup_;
    public bool HasMetricSetup {
      get { return hasMetricSetup; }
    }
    public global::Proto.Messages.MetricSetup MetricSetup {
      get { return metricSetup_ ?? global::Proto.Messages.MetricSetup.DefaultInstance; }
    }
    
    public const int ModificationFieldNumber = 2;
    private bool hasModification;
    private global::Proto.Messages.Modification modification_ = global::Proto.Messages.Modification.NONE;
    public bool HasModification {
      get { return hasModification; }
    }
    public global::Proto.Messages.Modification Modification {
      get { return modification_; }
    }
    
    public const int AccountIdFieldNumber = 3;
    private bool hasAccountId;
    private int accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public int AccountId {
      get { return accountId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMetricSetup) return false;
        if (!hasModification) return false;
        if (!hasAccountId) return false;
        if (!MetricSetup.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _metricSetupChangedEventFieldNames;
      if (hasMetricSetup) {
        output.WriteMessage(1, field_names[1], MetricSetup);
      }
      if (hasModification) {
        output.WriteEnum(2, field_names[2], (int) Modification, Modification);
      }
      if (hasAccountId) {
        output.WriteInt32(3, field_names[0], AccountId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMetricSetup) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, MetricSetup);
      }
      if (hasModification) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Modification);
      }
      if (hasAccountId) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, AccountId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MetricSetupChangedEvent ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MetricSetupChangedEvent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MetricSetupChangedEvent ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MetricSetupChangedEvent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MetricSetupChangedEvent ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MetricSetupChangedEvent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MetricSetupChangedEvent ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MetricSetupChangedEvent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MetricSetupChangedEvent ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MetricSetupChangedEvent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MetricSetupChangedEvent MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MetricSetupChangedEvent prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MetricSetupChangedEvent, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MetricSetupChangedEvent cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MetricSetupChangedEvent result;
      
      private MetricSetupChangedEvent PrepareBuilder() {
        if (resultIsReadOnly) {
          MetricSetupChangedEvent original = result;
          result = new MetricSetupChangedEvent();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MetricSetupChangedEvent MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Proto.Messages.MetricSetupChangedEvent.Descriptor; }
      }
      
      public override MetricSetupChangedEvent DefaultInstanceForType {
        get { return global::Proto.Messages.MetricSetupChangedEvent.DefaultInstance; }
      }
      
      public override MetricSetupChangedEvent BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MetricSetupChangedEvent) {
          return MergeFrom((MetricSetupChangedEvent) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MetricSetupChangedEvent other) {
        if (other == global::Proto.Messages.MetricSetupChangedEvent.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMetricSetup) {
          MergeMetricSetup(other.MetricSetup);
        }
        if (other.HasModification) {
          Modification = other.Modification;
        }
        if (other.HasAccountId) {
          AccountId = other.AccountId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_metricSetupChangedEventFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _metricSetupChangedEventFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::Proto.Messages.MetricSetup.Builder subBuilder = global::Proto.Messages.MetricSetup.CreateBuilder();
              if (result.hasMetricSetup) {
                subBuilder.MergeFrom(MetricSetup);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MetricSetup = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.modification_, out unknown)) {
                result.hasModification = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 24: {
              result.hasAccountId = input.ReadInt32(ref result.accountId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMetricSetup {
       get { return result.hasMetricSetup; }
      }
      public global::Proto.Messages.MetricSetup MetricSetup {
        get { return result.MetricSetup; }
        set { SetMetricSetup(value); }
      }
      public Builder SetMetricSetup(global::Proto.Messages.MetricSetup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMetricSetup = true;
        result.metricSetup_ = value;
        return this;
      }
      public Builder SetMetricSetup(global::Proto.Messages.MetricSetup.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMetricSetup = true;
        result.metricSetup_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMetricSetup(global::Proto.Messages.MetricSetup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMetricSetup &&
            result.metricSetup_ != global::Proto.Messages.MetricSetup.DefaultInstance) {
            result.metricSetup_ = global::Proto.Messages.MetricSetup.CreateBuilder(result.metricSetup_).MergeFrom(value).BuildPartial();
        } else {
          result.metricSetup_ = value;
        }
        result.hasMetricSetup = true;
        return this;
      }
      public Builder ClearMetricSetup() {
        PrepareBuilder();
        result.hasMetricSetup = false;
        result.metricSetup_ = null;
        return this;
      }
      
      public bool HasModification {
       get { return result.hasModification; }
      }
      public global::Proto.Messages.Modification Modification {
        get { return result.Modification; }
        set { SetModification(value); }
      }
      public Builder SetModification(global::Proto.Messages.Modification value) {
        PrepareBuilder();
        result.hasModification = true;
        result.modification_ = value;
        return this;
      }
      public Builder ClearModification() {
        PrepareBuilder();
        result.hasModification = false;
        result.modification_ = global::Proto.Messages.Modification.NONE;
        return this;
      }
      
      public bool HasAccountId {
        get { return result.hasAccountId; }
      }
      public int AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(int value) {
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = 0;
        return this;
      }
    }
    static MetricSetupChangedEvent() {
      object.ReferenceEquals(global::Proto.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CalculateMetricCommand : pb::GeneratedMessage<CalculateMetricCommand, CalculateMetricCommand.Builder> {
    private CalculateMetricCommand() { }
    private static readonly CalculateMetricCommand defaultInstance = new CalculateMetricCommand().MakeReadOnly();
    private static readonly string[] _calculateMetricCommandFieldNames = new string[] { "AccountId", "CommandId", "EventId", "MetricSetup", "TargetIds" };
    private static readonly uint[] _calculateMetricCommandFieldTags = new uint[] { 8, 42, 34, 18, 26 };
    public static CalculateMetricCommand DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CalculateMetricCommand DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CalculateMetricCommand ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Proto.Messages.Messages.internal__static_CalculateMetricCommand__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CalculateMetricCommand, CalculateMetricCommand.Builder> InternalFieldAccessors {
      get { return global::Proto.Messages.Messages.internal__static_CalculateMetricCommand__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private int accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public int AccountId {
      get { return accountId_; }
    }
    
    public const int MetricSetupFieldNumber = 2;
    private bool hasMetricSetup;
    private global::Proto.Messages.MetricSetup metricSetup_;
    public bool HasMetricSetup {
      get { return hasMetricSetup; }
    }
    public global::Proto.Messages.MetricSetup MetricSetup {
      get { return metricSetup_ ?? global::Proto.Messages.MetricSetup.DefaultInstance; }
    }
    
    public const int TargetIdsFieldNumber = 3;
    private int targetIdsMemoizedSerializedSize;
    private pbc::PopsicleList<int> targetIds_ = new pbc::PopsicleList<int>();
    public scg::IList<int> TargetIdsList {
      get { return pbc::Lists.AsReadOnly(targetIds_); }
    }
    public int TargetIdsCount {
      get { return targetIds_.Count; }
    }
    public int GetTargetIds(int index) {
      return targetIds_[index];
    }
    
    public const int EventIdFieldNumber = 4;
    private bool hasEventId;
    private string eventId_ = "";
    public bool HasEventId {
      get { return hasEventId; }
    }
    public string EventId {
      get { return eventId_; }
    }
    
    public const int CommandIdFieldNumber = 5;
    private bool hasCommandId;
    private string commandId_ = "";
    public bool HasCommandId {
      get { return hasCommandId; }
    }
    public string CommandId {
      get { return commandId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasMetricSetup) return false;
        if (!hasEventId) return false;
        if (!hasCommandId) return false;
        if (!MetricSetup.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _calculateMetricCommandFieldNames;
      if (hasAccountId) {
        output.WriteInt32(1, field_names[0], AccountId);
      }
      if (hasMetricSetup) {
        output.WriteMessage(2, field_names[3], MetricSetup);
      }
      if (targetIds_.Count > 0) {
        output.WritePackedInt32Array(3, field_names[4], targetIdsMemoizedSerializedSize, targetIds_);
      }
      if (hasEventId) {
        output.WriteString(4, field_names[2], EventId);
      }
      if (hasCommandId) {
        output.WriteString(5, field_names[1], CommandId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAccountId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, AccountId);
      }
      if (hasMetricSetup) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, MetricSetup);
      }
      {
        int dataSize = 0;
        foreach (int element in TargetIdsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (targetIds_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        targetIdsMemoizedSerializedSize = dataSize;
      }
      if (hasEventId) {
        size += pb::CodedOutputStream.ComputeStringSize(4, EventId);
      }
      if (hasCommandId) {
        size += pb::CodedOutputStream.ComputeStringSize(5, CommandId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static CalculateMetricCommand ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CalculateMetricCommand ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CalculateMetricCommand ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CalculateMetricCommand ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CalculateMetricCommand ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CalculateMetricCommand ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CalculateMetricCommand ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CalculateMetricCommand ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CalculateMetricCommand ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CalculateMetricCommand ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CalculateMetricCommand MakeReadOnly() {
      targetIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CalculateMetricCommand prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CalculateMetricCommand, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CalculateMetricCommand cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CalculateMetricCommand result;
      
      private CalculateMetricCommand PrepareBuilder() {
        if (resultIsReadOnly) {
          CalculateMetricCommand original = result;
          result = new CalculateMetricCommand();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CalculateMetricCommand MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Proto.Messages.CalculateMetricCommand.Descriptor; }
      }
      
      public override CalculateMetricCommand DefaultInstanceForType {
        get { return global::Proto.Messages.CalculateMetricCommand.DefaultInstance; }
      }
      
      public override CalculateMetricCommand BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CalculateMetricCommand) {
          return MergeFrom((CalculateMetricCommand) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CalculateMetricCommand other) {
        if (other == global::Proto.Messages.CalculateMetricCommand.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          AccountId = other.AccountId;
        }
        if (other.HasMetricSetup) {
          MergeMetricSetup(other.MetricSetup);
        }
        if (other.targetIds_.Count != 0) {
          result.targetIds_.Add(other.targetIds_);
        }
        if (other.HasEventId) {
          EventId = other.EventId;
        }
        if (other.HasCommandId) {
          CommandId = other.CommandId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_calculateMetricCommandFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _calculateMetricCommandFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAccountId = input.ReadInt32(ref result.accountId_);
              break;
            }
            case 18: {
              global::Proto.Messages.MetricSetup.Builder subBuilder = global::Proto.Messages.MetricSetup.CreateBuilder();
              if (result.hasMetricSetup) {
                subBuilder.MergeFrom(MetricSetup);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MetricSetup = subBuilder.BuildPartial();
              break;
            }
            case 26:
            case 24: {
              input.ReadInt32Array(tag, field_name, result.targetIds_);
              break;
            }
            case 34: {
              result.hasEventId = input.ReadString(ref result.eventId_);
              break;
            }
            case 42: {
              result.hasCommandId = input.ReadString(ref result.commandId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
        get { return result.hasAccountId; }
      }
      public int AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(int value) {
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = 0;
        return this;
      }
      
      public bool HasMetricSetup {
       get { return result.hasMetricSetup; }
      }
      public global::Proto.Messages.MetricSetup MetricSetup {
        get { return result.MetricSetup; }
        set { SetMetricSetup(value); }
      }
      public Builder SetMetricSetup(global::Proto.Messages.MetricSetup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMetricSetup = true;
        result.metricSetup_ = value;
        return this;
      }
      public Builder SetMetricSetup(global::Proto.Messages.MetricSetup.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMetricSetup = true;
        result.metricSetup_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMetricSetup(global::Proto.Messages.MetricSetup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMetricSetup &&
            result.metricSetup_ != global::Proto.Messages.MetricSetup.DefaultInstance) {
            result.metricSetup_ = global::Proto.Messages.MetricSetup.CreateBuilder(result.metricSetup_).MergeFrom(value).BuildPartial();
        } else {
          result.metricSetup_ = value;
        }
        result.hasMetricSetup = true;
        return this;
      }
      public Builder ClearMetricSetup() {
        PrepareBuilder();
        result.hasMetricSetup = false;
        result.metricSetup_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<int> TargetIdsList {
        get { return PrepareBuilder().targetIds_; }
      }
      public int TargetIdsCount {
        get { return result.TargetIdsCount; }
      }
      public int GetTargetIds(int index) {
        return result.GetTargetIds(index);
      }
      public Builder SetTargetIds(int index, int value) {
        PrepareBuilder();
        result.targetIds_[index] = value;
        return this;
      }
      public Builder AddTargetIds(int value) {
        PrepareBuilder();
        result.targetIds_.Add(value);
        return this;
      }
      public Builder AddRangeTargetIds(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.targetIds_.Add(values);
        return this;
      }
      public Builder ClearTargetIds() {
        PrepareBuilder();
        result.targetIds_.Clear();
        return this;
      }
      
      public bool HasEventId {
        get { return result.hasEventId; }
      }
      public string EventId {
        get { return result.EventId; }
        set { SetEventId(value); }
      }
      public Builder SetEventId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEventId = true;
        result.eventId_ = value;
        return this;
      }
      public Builder ClearEventId() {
        PrepareBuilder();
        result.hasEventId = false;
        result.eventId_ = "";
        return this;
      }
      
      public bool HasCommandId {
        get { return result.hasCommandId; }
      }
      public string CommandId {
        get { return result.CommandId; }
        set { SetCommandId(value); }
      }
      public Builder SetCommandId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCommandId = true;
        result.commandId_ = value;
        return this;
      }
      public Builder ClearCommandId() {
        PrepareBuilder();
        result.hasCommandId = false;
        result.commandId_ = "";
        return this;
      }
    }
    static CalculateMetricCommand() {
      object.ReferenceEquals(global::Proto.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Target : pb::GeneratedMessage<Target, Target.Builder> {
    private Target() { }
    private static readonly Target defaultInstance = new Target().MakeReadOnly();
    private static readonly string[] _targetFieldNames = new string[] { "EntityType", "Id" };
    private static readonly uint[] _targetFieldTags = new uint[] { 18, 8 };
    public static Target DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Target DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Target ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Proto.Messages.Messages.internal__static_Target__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Target, Target.Builder> InternalFieldAccessors {
      get { return global::Proto.Messages.Messages.internal__static_Target__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int EntityTypeFieldNumber = 2;
    private bool hasEntityType;
    private string entityType_ = "";
    public bool HasEntityType {
      get { return hasEntityType; }
    }
    public string EntityType {
      get { return entityType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasEntityType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _targetFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (hasEntityType) {
        output.WriteString(2, field_names[0], EntityType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasEntityType) {
        size += pb::CodedOutputStream.ComputeStringSize(2, EntityType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Target ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Target ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Target ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Target ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Target ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Target ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Target ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Target ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Target ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Target ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Target MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Target prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Target, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Target cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Target result;
      
      private Target PrepareBuilder() {
        if (resultIsReadOnly) {
          Target original = result;
          result = new Target();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Target MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Proto.Messages.Target.Descriptor; }
      }
      
      public override Target DefaultInstanceForType {
        get { return global::Proto.Messages.Target.DefaultInstance; }
      }
      
      public override Target BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Target) {
          return MergeFrom((Target) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Target other) {
        if (other == global::Proto.Messages.Target.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasEntityType) {
          EntityType = other.EntityType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_targetFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _targetFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              result.hasEntityType = input.ReadString(ref result.entityType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasEntityType {
        get { return result.hasEntityType; }
      }
      public string EntityType {
        get { return result.EntityType; }
        set { SetEntityType(value); }
      }
      public Builder SetEntityType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEntityType = true;
        result.entityType_ = value;
        return this;
      }
      public Builder ClearEntityType() {
        PrepareBuilder();
        result.hasEntityType = false;
        result.entityType_ = "";
        return this;
      }
    }
    static Target() {
      object.ReferenceEquals(global::Proto.Messages.Messages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CalculateMetricCommandExtended : pb::GeneratedMessage<CalculateMetricCommandExtended, CalculateMetricCommandExtended.Builder> {
    private CalculateMetricCommandExtended() { }
    private static readonly CalculateMetricCommandExtended defaultInstance = new CalculateMetricCommandExtended().MakeReadOnly();
    private static readonly string[] _calculateMetricCommandExtendedFieldNames = new string[] { "AccountId", "CommandId", "EventId", "MetricSetup", "Targets" };
    private static readonly uint[] _calculateMetricCommandExtendedFieldTags = new uint[] { 8, 42, 34, 18, 26 };
    public static CalculateMetricCommandExtended DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CalculateMetricCommandExtended DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CalculateMetricCommandExtended ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::Proto.Messages.Messages.internal__static_CalculateMetricCommandExtended__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CalculateMetricCommandExtended, CalculateMetricCommandExtended.Builder> InternalFieldAccessors {
      get { return global::Proto.Messages.Messages.internal__static_CalculateMetricCommandExtended__FieldAccessorTable; }
    }
    
    public const int AccountIdFieldNumber = 1;
    private bool hasAccountId;
    private int accountId_;
    public bool HasAccountId {
      get { return hasAccountId; }
    }
    public int AccountId {
      get { return accountId_; }
    }
    
    public const int MetricSetupFieldNumber = 2;
    private bool hasMetricSetup;
    private global::Proto.Messages.MetricSetup metricSetup_;
    public bool HasMetricSetup {
      get { return hasMetricSetup; }
    }
    public global::Proto.Messages.MetricSetup MetricSetup {
      get { return metricSetup_ ?? global::Proto.Messages.MetricSetup.DefaultInstance; }
    }
    
    public const int TargetsFieldNumber = 3;
    private pbc::PopsicleList<global::Proto.Messages.Target> targets_ = new pbc::PopsicleList<global::Proto.Messages.Target>();
    public scg::IList<global::Proto.Messages.Target> TargetsList {
      get { return targets_; }
    }
    public int TargetsCount {
      get { return targets_.Count; }
    }
    public global::Proto.Messages.Target GetTargets(int index) {
      return targets_[index];
    }
    
    public const int EventIdFieldNumber = 4;
    private bool hasEventId;
    private string eventId_ = "";
    public bool HasEventId {
      get { return hasEventId; }
    }
    public string EventId {
      get { return eventId_; }
    }
    
    public const int CommandIdFieldNumber = 5;
    private bool hasCommandId;
    private string commandId_ = "";
    public bool HasCommandId {
      get { return hasCommandId; }
    }
    public string CommandId {
      get { return commandId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccountId) return false;
        if (!hasMetricSetup) return false;
        if (!hasEventId) return false;
        if (!hasCommandId) return false;
        if (!MetricSetup.IsInitialized) return false;
        foreach (global::Proto.Messages.Target element in TargetsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _calculateMetricCommandExtendedFieldNames;
      if (hasAccountId) {
        output.WriteInt32(1, field_names[0], AccountId);
      }
      if (hasMetricSetup) {
        output.WriteMessage(2, field_names[3], MetricSetup);
      }
      if (targets_.Count > 0) {
        output.WriteMessageArray(3, field_names[4], targets_);
      }
      if (hasEventId) {
        output.WriteString(4, field_names[2], EventId);
      }
      if (hasCommandId) {
        output.WriteString(5, field_names[1], CommandId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAccountId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, AccountId);
      }
      if (hasMetricSetup) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, MetricSetup);
      }
      foreach (global::Proto.Messages.Target element in TargetsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      if (hasEventId) {
        size += pb::CodedOutputStream.ComputeStringSize(4, EventId);
      }
      if (hasCommandId) {
        size += pb::CodedOutputStream.ComputeStringSize(5, CommandId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static CalculateMetricCommandExtended ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CalculateMetricCommandExtended ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CalculateMetricCommandExtended ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CalculateMetricCommandExtended ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CalculateMetricCommandExtended ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CalculateMetricCommandExtended ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CalculateMetricCommandExtended ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CalculateMetricCommandExtended ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CalculateMetricCommandExtended ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CalculateMetricCommandExtended ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CalculateMetricCommandExtended MakeReadOnly() {
      targets_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CalculateMetricCommandExtended prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CalculateMetricCommandExtended, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CalculateMetricCommandExtended cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CalculateMetricCommandExtended result;
      
      private CalculateMetricCommandExtended PrepareBuilder() {
        if (resultIsReadOnly) {
          CalculateMetricCommandExtended original = result;
          result = new CalculateMetricCommandExtended();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CalculateMetricCommandExtended MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::Proto.Messages.CalculateMetricCommandExtended.Descriptor; }
      }
      
      public override CalculateMetricCommandExtended DefaultInstanceForType {
        get { return global::Proto.Messages.CalculateMetricCommandExtended.DefaultInstance; }
      }
      
      public override CalculateMetricCommandExtended BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CalculateMetricCommandExtended) {
          return MergeFrom((CalculateMetricCommandExtended) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CalculateMetricCommandExtended other) {
        if (other == global::Proto.Messages.CalculateMetricCommandExtended.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccountId) {
          AccountId = other.AccountId;
        }
        if (other.HasMetricSetup) {
          MergeMetricSetup(other.MetricSetup);
        }
        if (other.targets_.Count != 0) {
          result.targets_.Add(other.targets_);
        }
        if (other.HasEventId) {
          EventId = other.EventId;
        }
        if (other.HasCommandId) {
          CommandId = other.CommandId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_calculateMetricCommandExtendedFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _calculateMetricCommandExtendedFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasAccountId = input.ReadInt32(ref result.accountId_);
              break;
            }
            case 18: {
              global::Proto.Messages.MetricSetup.Builder subBuilder = global::Proto.Messages.MetricSetup.CreateBuilder();
              if (result.hasMetricSetup) {
                subBuilder.MergeFrom(MetricSetup);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MetricSetup = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.targets_, global::Proto.Messages.Target.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              result.hasEventId = input.ReadString(ref result.eventId_);
              break;
            }
            case 42: {
              result.hasCommandId = input.ReadString(ref result.commandId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccountId {
        get { return result.hasAccountId; }
      }
      public int AccountId {
        get { return result.AccountId; }
        set { SetAccountId(value); }
      }
      public Builder SetAccountId(int value) {
        PrepareBuilder();
        result.hasAccountId = true;
        result.accountId_ = value;
        return this;
      }
      public Builder ClearAccountId() {
        PrepareBuilder();
        result.hasAccountId = false;
        result.accountId_ = 0;
        return this;
      }
      
      public bool HasMetricSetup {
       get { return result.hasMetricSetup; }
      }
      public global::Proto.Messages.MetricSetup MetricSetup {
        get { return result.MetricSetup; }
        set { SetMetricSetup(value); }
      }
      public Builder SetMetricSetup(global::Proto.Messages.MetricSetup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMetricSetup = true;
        result.metricSetup_ = value;
        return this;
      }
      public Builder SetMetricSetup(global::Proto.Messages.MetricSetup.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMetricSetup = true;
        result.metricSetup_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMetricSetup(global::Proto.Messages.MetricSetup value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMetricSetup &&
            result.metricSetup_ != global::Proto.Messages.MetricSetup.DefaultInstance) {
            result.metricSetup_ = global::Proto.Messages.MetricSetup.CreateBuilder(result.metricSetup_).MergeFrom(value).BuildPartial();
        } else {
          result.metricSetup_ = value;
        }
        result.hasMetricSetup = true;
        return this;
      }
      public Builder ClearMetricSetup() {
        PrepareBuilder();
        result.hasMetricSetup = false;
        result.metricSetup_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::Proto.Messages.Target> TargetsList {
        get { return PrepareBuilder().targets_; }
      }
      public int TargetsCount {
        get { return result.TargetsCount; }
      }
      public global::Proto.Messages.Target GetTargets(int index) {
        return result.GetTargets(index);
      }
      public Builder SetTargets(int index, global::Proto.Messages.Target value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.targets_[index] = value;
        return this;
      }
      public Builder SetTargets(int index, global::Proto.Messages.Target.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.targets_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTargets(global::Proto.Messages.Target value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.targets_.Add(value);
        return this;
      }
      public Builder AddTargets(global::Proto.Messages.Target.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.targets_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTargets(scg::IEnumerable<global::Proto.Messages.Target> values) {
        PrepareBuilder();
        result.targets_.Add(values);
        return this;
      }
      public Builder ClearTargets() {
        PrepareBuilder();
        result.targets_.Clear();
        return this;
      }
      
      public bool HasEventId {
        get { return result.hasEventId; }
      }
      public string EventId {
        get { return result.EventId; }
        set { SetEventId(value); }
      }
      public Builder SetEventId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEventId = true;
        result.eventId_ = value;
        return this;
      }
      public Builder ClearEventId() {
        PrepareBuilder();
        result.hasEventId = false;
        result.eventId_ = "";
        return this;
      }
      
      public bool HasCommandId {
        get { return result.hasCommandId; }
      }
      public string CommandId {
        get { return result.CommandId; }
        set { SetCommandId(value); }
      }
      public Builder SetCommandId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCommandId = true;
        result.commandId_ = value;
        return this;
      }
      public Builder ClearCommandId() {
        PrepareBuilder();
        result.hasCommandId = false;
        result.commandId_ = "";
        return this;
      }
    }
    static CalculateMetricCommandExtended() {
      object.ReferenceEquals(global::Proto.Messages.Messages.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
