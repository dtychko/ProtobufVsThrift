// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metric_setup_v3.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto_3.Messages {

  /// <summary>Holder for reflection information generated from metric_setup_v3.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MetricSetupV3Reflection {

    #region Descriptor
    /// <summary>File descriptor for metric_setup_v3.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MetricSetupV3Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVtZXRyaWNfc2V0dXBfdjMucHJvdG8iQAoLTWV0cmljU2V0dXASCgoCaWQY",
            "ASABKAUSEAoIbWV0cmljSWQYAiABKAUSEwoLZW50aXR5VHlwZXMYAyABKAlC",
            "E6oCEFByb3RvXzMuTWVzc2FnZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto_3.Messages.MetricSetup), global::Proto_3.Messages.MetricSetup.Parser, new[]{ "Id", "MetricId", "EntityTypes" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MetricSetup : pb::IMessage<MetricSetup> {
    private static readonly pb::MessageParser<MetricSetup> _parser = new pb::MessageParser<MetricSetup>(() => new MetricSetup());
    public static pb::MessageParser<MetricSetup> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto_3.Messages.MetricSetupV3Reflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public MetricSetup() {
      OnConstruction();
    }

    partial void OnConstruction();

    public MetricSetup(MetricSetup other) : this() {
      id_ = other.id_;
      metricId_ = other.metricId_;
      entityTypes_ = other.entityTypes_;
    }

    public MetricSetup Clone() {
      return new MetricSetup(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "metricId" field.</summary>
    public const int MetricIdFieldNumber = 2;
    private int metricId_;
    public int MetricId {
      get { return metricId_; }
      set {
        metricId_ = value;
      }
    }

    /// <summary>Field number for the "entityTypes" field.</summary>
    public const int EntityTypesFieldNumber = 3;
    private string entityTypes_ = "";
    public string EntityTypes {
      get { return entityTypes_; }
      set {
        entityTypes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as MetricSetup);
    }

    public bool Equals(MetricSetup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MetricId != other.MetricId) return false;
      if (EntityTypes != other.EntityTypes) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (MetricId != 0) hash ^= MetricId.GetHashCode();
      if (EntityTypes.Length != 0) hash ^= EntityTypes.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (MetricId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MetricId);
      }
      if (EntityTypes.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EntityTypes);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (MetricId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MetricId);
      }
      if (EntityTypes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntityTypes);
      }
      return size;
    }

    public void MergeFrom(MetricSetup other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.MetricId != 0) {
        MetricId = other.MetricId;
      }
      if (other.EntityTypes.Length != 0) {
        EntityTypes = other.EntityTypes;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            MetricId = input.ReadInt32();
            break;
          }
          case 26: {
            EntityTypes = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
