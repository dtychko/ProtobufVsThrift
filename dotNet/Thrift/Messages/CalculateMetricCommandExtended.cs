/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Messages
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CalculateMetricCommandExtended : TBase
  {
    private int _AccountId;
    private MetricSetup _MetricSetup;
    private string _EventId;
    private string _CommandId;
    private List<Target> _Targets;

    public int AccountId
    {
      get
      {
        return _AccountId;
      }
      set
      {
        __isset.AccountId = true;
        this._AccountId = value;
      }
    }

    public MetricSetup MetricSetup
    {
      get
      {
        return _MetricSetup;
      }
      set
      {
        __isset.MetricSetup = true;
        this._MetricSetup = value;
      }
    }

    public string EventId
    {
      get
      {
        return _EventId;
      }
      set
      {
        __isset.EventId = true;
        this._EventId = value;
      }
    }

    public string CommandId
    {
      get
      {
        return _CommandId;
      }
      set
      {
        __isset.CommandId = true;
        this._CommandId = value;
      }
    }

    public List<Target> Targets
    {
      get
      {
        return _Targets;
      }
      set
      {
        __isset.Targets = true;
        this._Targets = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool AccountId;
      public bool MetricSetup;
      public bool EventId;
      public bool CommandId;
      public bool Targets;
    }

    public CalculateMetricCommandExtended() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              AccountId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              MetricSetup = new MetricSetup();
              MetricSetup.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              EventId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              CommandId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                Targets = new List<Target>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  Target _elem6 = new Target();
                  _elem6 = new Target();
                  _elem6.Read(iprot);
                  Targets.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CalculateMetricCommandExtended");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.AccountId) {
        field.Name = "AccountId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AccountId);
        oprot.WriteFieldEnd();
      }
      if (MetricSetup != null && __isset.MetricSetup) {
        field.Name = "MetricSetup";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        MetricSetup.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (EventId != null && __isset.EventId) {
        field.Name = "EventId";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EventId);
        oprot.WriteFieldEnd();
      }
      if (CommandId != null && __isset.CommandId) {
        field.Name = "CommandId";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CommandId);
        oprot.WriteFieldEnd();
      }
      if (Targets != null && __isset.Targets) {
        field.Name = "Targets";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Targets.Count));
          foreach (Target _iter7 in Targets)
          {
            _iter7.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CalculateMetricCommandExtended(");
      sb.Append("AccountId: ");
      sb.Append(AccountId);
      sb.Append(",MetricSetup: ");
      sb.Append(MetricSetup== null ? "<null>" : MetricSetup.ToString());
      sb.Append(",EventId: ");
      sb.Append(EventId);
      sb.Append(",CommandId: ");
      sb.Append(CommandId);
      sb.Append(",Targets: ");
      sb.Append(Targets);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
