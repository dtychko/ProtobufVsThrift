//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
if (typeof Messages === 'undefined') {
  Messages = {};
}
ttypes.Modification = {
'NONE' : 0,
'ADDED' : 1,
'UPDATED' : 2,
'DELETED' : 3
};
Messages.MetricSetup = module.exports.MetricSetup = function(args) {
  this.id = null;
  this.metricId = null;
  this.entityTypes = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.metricId !== undefined) {
      this.metricId = args.metricId;
    }
    if (args.entityTypes !== undefined) {
      this.entityTypes = args.entityTypes;
    }
  }
};
Messages.MetricSetup.prototype = {};
Messages.MetricSetup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.metricId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.entityTypes = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Messages.MetricSetup.prototype.write = function(output) {
  output.writeStructBegin('MetricSetup');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.metricId !== null && this.metricId !== undefined) {
    output.writeFieldBegin('metricId', Thrift.Type.I32, 2);
    output.writeI32(this.metricId);
    output.writeFieldEnd();
  }
  if (this.entityTypes !== null && this.entityTypes !== undefined) {
    output.writeFieldBegin('entityTypes', Thrift.Type.STRING, 3);
    output.writeString(this.entityTypes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Messages.MetricSetupChangedEvent = module.exports.MetricSetupChangedEvent = function(args) {
  this.MetricSetup = null;
  this.Modification = 0;
  this.AccountId = null;
  if (args) {
    if (args.MetricSetup !== undefined) {
      this.MetricSetup = args.MetricSetup;
    }
    if (args.Modification !== undefined) {
      this.Modification = args.Modification;
    }
    if (args.AccountId !== undefined) {
      this.AccountId = args.AccountId;
    }
  }
};
Messages.MetricSetupChangedEvent.prototype = {};
Messages.MetricSetupChangedEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.MetricSetup = new ttypes.MetricSetup();
        this.MetricSetup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.Modification = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.AccountId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Messages.MetricSetupChangedEvent.prototype.write = function(output) {
  output.writeStructBegin('MetricSetupChangedEvent');
  if (this.MetricSetup !== null && this.MetricSetup !== undefined) {
    output.writeFieldBegin('MetricSetup', Thrift.Type.STRUCT, 1);
    this.MetricSetup.write(output);
    output.writeFieldEnd();
  }
  if (this.Modification !== null && this.Modification !== undefined) {
    output.writeFieldBegin('Modification', Thrift.Type.I32, 2);
    output.writeI32(this.Modification);
    output.writeFieldEnd();
  }
  if (this.AccountId !== null && this.AccountId !== undefined) {
    output.writeFieldBegin('AccountId', Thrift.Type.I32, 3);
    output.writeI32(this.AccountId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Messages.CalculateMetricCommand = module.exports.CalculateMetricCommand = function(args) {
  this.AccountId = null;
  this.MetricSetup = null;
  this.EventId = null;
  this.CommandId = null;
  this.TargetIds = null;
  if (args) {
    if (args.AccountId !== undefined) {
      this.AccountId = args.AccountId;
    }
    if (args.MetricSetup !== undefined) {
      this.MetricSetup = args.MetricSetup;
    }
    if (args.EventId !== undefined) {
      this.EventId = args.EventId;
    }
    if (args.CommandId !== undefined) {
      this.CommandId = args.CommandId;
    }
    if (args.TargetIds !== undefined) {
      this.TargetIds = args.TargetIds;
    }
  }
};
Messages.CalculateMetricCommand.prototype = {};
Messages.CalculateMetricCommand.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.AccountId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.MetricSetup = new ttypes.MetricSetup();
        this.MetricSetup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.EventId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.CommandId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.TargetIds = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32();
          this.TargetIds.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Messages.CalculateMetricCommand.prototype.write = function(output) {
  output.writeStructBegin('CalculateMetricCommand');
  if (this.AccountId !== null && this.AccountId !== undefined) {
    output.writeFieldBegin('AccountId', Thrift.Type.I32, 1);
    output.writeI32(this.AccountId);
    output.writeFieldEnd();
  }
  if (this.MetricSetup !== null && this.MetricSetup !== undefined) {
    output.writeFieldBegin('MetricSetup', Thrift.Type.STRUCT, 2);
    this.MetricSetup.write(output);
    output.writeFieldEnd();
  }
  if (this.EventId !== null && this.EventId !== undefined) {
    output.writeFieldBegin('EventId', Thrift.Type.STRING, 3);
    output.writeString(this.EventId);
    output.writeFieldEnd();
  }
  if (this.CommandId !== null && this.CommandId !== undefined) {
    output.writeFieldBegin('CommandId', Thrift.Type.STRING, 4);
    output.writeString(this.CommandId);
    output.writeFieldEnd();
  }
  if (this.TargetIds !== null && this.TargetIds !== undefined) {
    output.writeFieldBegin('TargetIds', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I32, this.TargetIds.length);
    for (var iter7 in this.TargetIds)
    {
      if (this.TargetIds.hasOwnProperty(iter7))
      {
        iter7 = this.TargetIds[iter7];
        output.writeI32(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Messages.Target = module.exports.Target = function(args) {
  this.id = null;
  this.entityType = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.entityType !== undefined) {
      this.entityType = args.entityType;
    }
  }
};
Messages.Target.prototype = {};
Messages.Target.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.entityType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Messages.Target.prototype.write = function(output) {
  output.writeStructBegin('Target');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.entityType !== null && this.entityType !== undefined) {
    output.writeFieldBegin('entityType', Thrift.Type.STRING, 2);
    output.writeString(this.entityType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Messages.CalculateMetricCommandExtended = module.exports.CalculateMetricCommandExtended = function(args) {
  this.accountId = null;
  this.metricSetup = null;
  this.eventId = null;
  this.commandId = null;
  this.targets = null;
  if (args) {
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.metricSetup !== undefined) {
      this.metricSetup = args.metricSetup;
    }
    if (args.eventId !== undefined) {
      this.eventId = args.eventId;
    }
    if (args.commandId !== undefined) {
      this.commandId = args.commandId;
    }
    if (args.targets !== undefined) {
      this.targets = args.targets;
    }
  }
};
Messages.CalculateMetricCommandExtended.prototype = {};
Messages.CalculateMetricCommandExtended.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.accountId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metricSetup = new ttypes.MetricSetup();
        this.metricSetup.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.eventId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.commandId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.targets = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.Target();
          elem14.read(input);
          this.targets.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Messages.CalculateMetricCommandExtended.prototype.write = function(output) {
  output.writeStructBegin('CalculateMetricCommandExtended');
  if (this.accountId !== null && this.accountId !== undefined) {
    output.writeFieldBegin('accountId', Thrift.Type.I32, 1);
    output.writeI32(this.accountId);
    output.writeFieldEnd();
  }
  if (this.metricSetup !== null && this.metricSetup !== undefined) {
    output.writeFieldBegin('metricSetup', Thrift.Type.STRUCT, 2);
    this.metricSetup.write(output);
    output.writeFieldEnd();
  }
  if (this.eventId !== null && this.eventId !== undefined) {
    output.writeFieldBegin('eventId', Thrift.Type.STRING, 3);
    output.writeString(this.eventId);
    output.writeFieldEnd();
  }
  if (this.commandId !== null && this.commandId !== undefined) {
    output.writeFieldBegin('commandId', Thrift.Type.STRING, 4);
    output.writeString(this.commandId);
    output.writeFieldEnd();
  }
  if (this.targets !== null && this.targets !== undefined) {
    output.writeFieldBegin('targets', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.targets.length);
    for (var iter15 in this.targets)
    {
      if (this.targets.hasOwnProperty(iter15))
      {
        iter15 = this.targets[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

